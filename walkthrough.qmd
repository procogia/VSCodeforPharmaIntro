---
title: "Quarto Sample"
format: html
---

## Markdown

Quarto has the same feel and function as an RMarkdown (but it can also run Python and bash!)

- It's _plain text_ so works well with version control
- It can be **rendered** into HTML, PDF, and more
- Learn more at: <https://quarto.org/docs/authoring/>

## Quarto Running Python Code Cells 

```{python}
import os
os.cpu_count()
```

## Equation

Use LaTeX to write equations:

$$
\chi' = \sum_{i=1}^n k_i s_i^2
$$


Here is a logistic regression example

```{python}

import numpy as np
import matplotlib.pyplot as plt


def sig(x):
    return 1/(1 + np.exp(-x))


x = np.linspace(-10, 10, 50)   
print(x)
p = sig(x)
plt.xlabel("x") 
plt.ylabel("Sigmoid(x)")  
plt.plot(x, p) 
plt.show()

```


## Using What the Previous Exercise Created 

Let's plot what we have in target_subset.csv

We need pandas, numpy, and matplotlib to be installed.

```{python}

import pandas
import numpy as np
import matplotlib.pyplot as plt

sample_compound_df = pandas.read_csv('./target_subset.csv')

x = sample_compound_df['Compound_Concentration']
y = sample_compound_df['Counts']


# calculate polynomial
z = np.polyfit(x, y, 2)
f = np.poly1d(z)

# calculate new x's and y's
x_new = np.linspace(min(x), max(x), 1000)
y_new = f(x_new)

plt.plot(x, y, 'o', label='data')
plt.plot(x_new, y_new, label='fit')
plt.legend(loc='best')
# plt.legend()
plt.show()


```


Let's plot every compound within df_for_tutorial.csv

```{python}

import pandas
import numpy as np
from matplotlib import pyplot as plt

sample_compound_df = pandas.read_csv('./df_for_tutorial.csv')

# Get all available compound IDs within 'Compound_ID' column
col_names = sample_compound_df['Compound_ID'].unique()

# We don't want 'BG' or 'NEG'
col_names = col_names[2:]



# For creating these plots we'd have to loop 
for comp_id in col_names:
    df_subset_for_plot = sample_compound_df[sample_compound_df['Compound_ID'] == comp_id]

    df_subset_for_plot = df_subset_for_plot[df_subset_for_plot['Compound_Concentration'].notna()]

    if df_subset_for_plot.empty:
        next
    else:
        print(df_subset_for_plot.head())
        filename_to_use = comp_id + '_scatter_with_fit.png'
        x = df_subset_for_plot['Compound_Concentration']
        y = df_subset_for_plot['Counts']
        
        # calculate polynomial
        # z = np.polyfit(x, y, 2)
        # f = np.poly1d(z)
    
        # calculate new x's and y's
        # x_new = np.linspace(min(x), max(x), 1000)
        # y_new = f(x_new)
        
        plt.plot(x, y, 'o', label=comp_id)
        # plt.plot(x_new, y_new, label='fit')
        plt.legend()
        plt.savefig(filename_to_use)
        plt.close()

```

